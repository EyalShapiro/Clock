/*
  @license
	Rollup.js v4.6.1
	Thu, 30 Nov 2023 05:22:35 GMT - commit ded37aa8f95d5ba9786fa8903ef3424fd0549c73

	https://github.com/rollup/rollup

	Released under the MIT License.
*/
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var rollup = require('./rollup.js');

var parseAst_js = require('./parseAst.js');

var fseventsImporter = require('./fsevents-importer.js');

var WatchEmitter =
/*#__PURE__*/
function () {
  function WatchEmitter() {
    _classCallCheck(this, WatchEmitter);

    this.currentHandlers = Object.create(null);
    this.persistentHandlers = Object.create(null);
  } // Will be overwritten by Rollup


  _createClass(WatchEmitter, [{
    key: "close",
    value: function close() {
      return regeneratorRuntime.async(function close$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, parameters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        parameters[_key - 1] = arguments[_key];
      }

      return Promise.all([].concat(_toConsumableArray(this.getCurrentHandlers(event)), _toConsumableArray(this.getPersistentHandlers(event))).map(function (handler) {
        return handler.apply(void 0, parameters);
      }));
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      var listeners = this.persistentHandlers[event];

      if (listeners) {
        // A hack stolen from "mitt": ">>> 0" does not change numbers >= 0, but -1
        // (which would remove the last array element if used unchanged) is turned
        // into max_int, which is outside the array and does not change anything.
        listeners.splice(listeners.indexOf(listener) >>> 0, 1);
      }

      return this;
    }
  }, {
    key: "on",
    value: function on(event, listener) {
      this.getPersistentHandlers(event).push(listener);
      return this;
    }
  }, {
    key: "onCurrentRun",
    value: function onCurrentRun(event, listener) {
      this.getCurrentHandlers(event).push(listener);
      return this;
    }
  }, {
    key: "once",
    value: function once(event, listener) {
      var _this = this;

      var selfRemovingListener = function selfRemovingListener() {
        _this.off(event, selfRemovingListener);

        return listener.apply(void 0, arguments);
      };

      this.on(event, selfRemovingListener);
      return this;
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      this.removeListenersForCurrentRun();
      this.persistentHandlers = Object.create(null);
      return this;
    }
  }, {
    key: "removeListenersForCurrentRun",
    value: function removeListenersForCurrentRun() {
      this.currentHandlers = Object.create(null);
      return this;
    }
  }, {
    key: "getCurrentHandlers",
    value: function getCurrentHandlers(event) {
      return this.currentHandlers[event] || (this.currentHandlers[event] = []);
    }
  }, {
    key: "getPersistentHandlers",
    value: function getPersistentHandlers(event) {
      return this.persistentHandlers[event] || (this.persistentHandlers[event] = []);
    }
  }]);

  return WatchEmitter;
}();

function watch(configs) {
  var emitter = new WatchEmitter();
  watchInternal(configs, emitter)["catch"](function (error) {
    rollup.handleError(error);
  });
  return emitter;
}

function watchInternal(configs, emitter) {
  var optionsList, watchOptionsList, _ref, Watcher;

  return regeneratorRuntime.async(function watchInternal$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(Promise.all(rollup.ensureArray(configs).map(function (config) {
            return rollup.mergeOptions(config, true);
          })));

        case 2:
          optionsList = _context2.sent;
          watchOptionsList = optionsList.filter(function (config) {
            return config.watch !== false;
          });

          if (!(watchOptionsList.length === 0)) {
            _context2.next = 6;
            break;
          }

          return _context2.abrupt("return", parseAst_js.error(parseAst_js.logInvalidOption('watch', parseAst_js.URL_WATCH, 'there must be at least one config where "watch" is not set to "false"')));

        case 6:
          _context2.next = 8;
          return regeneratorRuntime.awrap(fseventsImporter.loadFsEvents());

        case 8:
          _context2.next = 10;
          return regeneratorRuntime.awrap(Promise.resolve().then(function () {
            return require('./watch.js');
          }));

        case 10:
          _ref = _context2.sent;
          Watcher = _ref.Watcher;
          new Watcher(watchOptionsList, emitter);

        case 13:
        case "end":
          return _context2.stop();
      }
    }
  });
}

exports.watch = watch;